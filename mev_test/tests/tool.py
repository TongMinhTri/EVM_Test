import pyrevm
from web3 import Web3

class TokenTransactionVerifier:
    def __init__(self, rpc_url, token_address):
        self.web3 = Web3(Web3.HTTPProvider(rpc_url))
        self.token_address = Web3.toChecksumAddress(token_address)
        self.evm = pyrevm.EVM()

    def load_transaction(self, tx_hash):
        tx = self.web3.eth.get_transaction(tx_hash)
        receipt = self.web3.eth.get_transaction_receipt(tx_hash)
        return tx, receipt

    def setup_evm_state(self, block_number):
        # Sync block state
        block = self.web3.eth.get_block(block_number)
        self.evm.set_block(block)
        # Load token contract code
        token_code = self.web3.eth.get_code(self.token_address)
        self.evm.set_account_code(self.token_address, token_code)

    def simulate_transaction(self, tx):
        # Set up transaction context
        sender = Web3.toChecksumAddress(tx['from'])
        receiver = Web3.toChecksumAddress(tx['to'])
        input_data = tx['input']
        gas_limit = tx['gas']

        self.evm.set_transaction(sender, receiver, tx['value'], input_data, gas_limit)
        return self.evm.run()

    def verify_transaction(self, tx_hash):
        tx, receipt = self.load_transaction(tx_hash)
        self.setup_evm_state(tx['blockNumber'])

        simulated_result = self.simulate_transaction(tx)
        real_result = receipt['logs']  # Logs generated by real transaction

        # Compare results
        return simulated_result == real_result

if __name__ == "__main__":
    verifier = TokenTransactionVerifier(
        rpc_url="http://192.168.1.58:8545",
        token_address="0x1bfce574deff725a3f483c334b790e25c8fa9779"
    )
    tx_hash = "0xTransactionHash"
    is_valid = verifier.verify_transaction(tx_hash)
    print(f"Transaction {tx_hash} valid: {is_valid}")
